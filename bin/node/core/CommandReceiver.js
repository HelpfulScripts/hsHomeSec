"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const hsnode_1 = require("hsnode");
const log = new hsnode_1.Log('hsCmdRec');
const Exec = require("./CommandExecution");
const UserComm_1 = require("../comm/UserComm");
const UserComm_2 = require("../comm/UserComm");
const UserComm_3 = require("../comm/UserComm");
const UserComm_4 = require("../comm/UserComm");
const gCommands = [];
function interpretCommand(cmd, params, from) {
    const cmdObj = gCommands[cmd];
    if (cmdObj) {
        log.info(`received command '${cmd}' with params '${params.join('|')}' from '${from.name}'`);
        try {
            return cmdObj.commandFn(params);
        }
        catch (err) {
            console.trace(`error executing command '${cmd}': ${err}`);
        }
    }
    else {
        log.info(`received unkwon command '${cmd}'`);
        return Exec.sayFn([`${cmd} ${params.join(' ')}`])
            .catch(err => {
            log.error(`executing ${cmd}: ${err.toString()}`);
            return err.toString();
        });
    }
}
function informSender(cmd, content, from) {
    log.info(`informing ${from.name}: cmd '${cmd}' returned ${log.inspect(content, 0)}`);
    if (content) {
        return Promise.all([
            UserComm_4.sendEmail(`Re: ${cmd}`, [from], content.message, content.attachments),
            UserComm_3.message([from], content.message || '', content.attachments)
        ]);
    }
    else {
        log.error(`no content specified for cmd ${cmd} from ${from.name}`);
        return Promise.resolve();
    }
}
function processCommand(cmd, from) {
    if (from) {
        const completeCmd = cmd.split(' ');
        cmd = completeCmd[0];
        completeCmd.shift();
        return interpretCommand(cmd, completeCmd, from)
            .then((content) => informSender(cmd, content, from));
    }
    else {
        log.warn(`no valid sender found`);
        return Promise.resolve();
    }
}
exports.processCommand = processCommand;
exports.addCommand = (cmdFn, cmd, ...options) => {
    log.debug('adding command ' + cmd);
    var obj = { commandFn: cmdFn, command: cmd, params: options };
    gCommands.push(obj);
    gCommands[cmd] = obj;
};
exports.getCommands = () => {
    log.debug('getting list of command');
    return gCommands.map((c) => `${c.command} ${c.params.join(' ')}`);
};
;
class EmailPolling {
    constructor(ms) {
        this.ms = ms;
        this.processed = [];
        this.firstRun = true;
        setTimeout(this.poll.bind(this), this.ms);
        log.info(`started email polling every ${this.ms / 1000}s`);
    }
    poll() {
        const date = new Date(Date.now());
        date.setHours(date.getHours() - 1);
        UserComm_2.getEmail(date)
            .then(this.processMails.bind(this))
            .then(() => setTimeout(this.poll.bind(this), this.ms));
    }
    processMails(accounts) {
        log.debug(`processMails: \n${log.inspect(accounts, null)}`);
        accounts.forEach((a) => a.msgSinceDate.forEach((m) => {
            if (!this.processed['' + m.id]) {
                this.processed['' + m.id] = Date.now();
                if (this.firstRun) {
                    return;
                }
                const from = m.from.match(/<(.*)>/)[1];
                const user = UserComm_1.users.userByEmail(from);
                if (user) {
                    log.info(`processing email ${m.id} from ${user.name} with subject ${m.subject}`);
                    processCommand(m.subject.toLowerCase(), user);
                }
                else {
                    log.warn(`rejecting email ${m.id} from ${m.from} with subject ${m.subject}`);
                }
            }
            else {
                log.debug(`message id=${m.id} already proccessed of ${Object.keys(this.processed).length} total`);
            }
        }));
        this.cleanupProcessed();
        this.firstRun = false;
    }
    cleanupProcessed() {
        const ms = Date.now() - 24 * 60 * 60 * 1000;
        Object.keys(this.processed).forEach(k => { if (this.processed[k] < ms) {
            delete this.processed[k];
        } });
    }
}
exports.EmailPolling = EmailPolling;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbWFuZFJlY2VpdmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL25vZGUvY29yZS9Db21tYW5kUmVjZWl2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSxtQ0FBc0M7QUFBRyxNQUFNLEdBQUcsR0FBRyxJQUFJLFlBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUN6RSwyQ0FBa0Q7QUFDbEQsK0NBQWdEO0FBQ2hELCtDQUFnRDtBQUNoRCwrQ0FBNEM7QUFDNUMsK0NBQTRDO0FBc0I1QyxNQUFNLFNBQVMsR0FBYyxFQUFFLENBQUM7QUFRaEMsMEJBQTBCLEdBQVUsRUFBRSxNQUFlLEVBQUUsSUFBUztJQUM1RCxNQUFNLE1BQU0sR0FBVyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdEMsSUFBSSxNQUFNLEVBQUU7UUFDUixHQUFHLENBQUMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLGtCQUFrQixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQzVGLElBQUk7WUFDQSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDbkM7UUFDRCxPQUFNLEdBQUcsRUFBRTtZQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsNEJBQTRCLEdBQUcsTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1NBQUU7S0FDNUU7U0FBTTtRQUNILEdBQUcsQ0FBQyxJQUFJLENBQUMsNEJBQTRCLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDN0MsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDaEQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ1QsR0FBRyxDQUFDLEtBQUssQ0FBQyxhQUFhLEdBQUcsS0FBSyxHQUFHLENBQUMs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