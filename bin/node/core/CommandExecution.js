"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const hsnode_1 = require("hsnode");
const log = new hsnode_1.Log('hsCmdExec');
const hsutil_1 = require("hsutil");
const hsosaes6_1 = require("hsosaes6");
const UserComm_1 = require("../comm/UserComm");
const Device_1 = require("../device/Device");
const CommandReceiver_1 = require("./CommandReceiver");
const hsutil_2 = require("hsutil");
const path = require("path");
let gSnapshotDir = '';
function armingCall(deviceCalls) {
    log.info(`waiting for ${deviceCalls.length} responses`);
    return Promise.race([
        Promise.all(deviceCalls),
        hsutil_1.timeout(20000)
    ])
        .then(() => { log.info(`...completed`); })
        .catch(err => {
        log.error(err);
        const resp = 'some device status results missing';
        log.error(resp);
    });
}
function setSnapshotDir(dir) { gSnapshotDir = dir; }
exports.setSnapshotDir = setSnapshotDir;
exports.helpFn = () => {
    const commands = CommandReceiver_1.getCommands();
    let msg = 'available commands:\n ' + commands.join('\n  ');
    return Promise.resolve({ message: msg });
};
exports.restartFn = () => {
    return hsosaes6_1.osa.restart()
        .then(result => {
        log.info('restarting...' + result);
        if (!result || result === true) {
            process.exit(0);
            return { message: true };
        }
        else {
            return { message: false };
        }
    });
};
exports.snapFn = (param) => {
    const getSnap = (dev) => !dev.hasVideo() ? Promise.resolve(undefined) :
        dev.snapPicture()
            .then(picData => {
            let fileName = path.normalize(gSnapshotDir + hsutil_2.date(`${dev.getName()}_%YYYY%MM%DD-%hh-%mm-%ss.jpg`));
            log.info(`saving snapshot from ${dev.getName()} at ${fileName}`);
            return hsnode_1.fs.writeStream(fileName, picData.data);
        });
    return Promise.all((!param || param[0] === '') ?
        Device_1.DeviceList.getDevices().map(getSnap) : [getSnap(Device_1.DeviceList.getDevice(param[0]))])
        .then((files) => { return { attachments: files }; });
};
exports.facetimeFn = (username) => {
    const user = UserComm_1.users.userByName(username[0]);
    log.info('trying facetime call to ' + user.name);
    return hsosaes6_1.osa.facetime(user.AppleID)
        .then((result) => { return { message: result }; });
};
exports.sayFn = (msg) => {
    return hsosaes6_1.osa.say(msg[0])
        .then((result) => { return { message: result }; });
};
exports.armFn = (param) => {
    const audible = (param[0] === 'away');
    const devices = Device_1.DeviceList.getDevices().filter(d => d.hasAlarm());
    return Promise.all(devices.map((d) => d.setAudible(audible)
        .then(() => d.arm(true))
        .then((b) => `${d.getName()} ${b ? 'armed' : '??'} ${d.getAudible() ? 'with siren' : ''}`)))
        .then((results) => {
        log.debug(`devices armed: ${log.inspect(results)}`);
        return { message: results.join('\n') };
    })
        .catch(log.error.bind(log));
};
exports.disarmFn = () => {
    const devices = Device_1.DeviceList.getDevices().filter(d => d.hasAlarm());
    return Promise.all(devices.map((d) => d.arm(false)
        .then((b) => `${d.getName()} ${b ? 'disarmed' : '??'}`)))
        .then((results) => {
        log.info(`devices disarmed: ${log.inspect(results)}`);
        return { message: results.join('\n') };
    })
        .catch(log.error.bind(log));
};
exports.armingStatusFn = () => {
    const alarmDevices = Device_1.DeviceList.getDevices()
        .filter((dev) => dev.hasAlarm());
    return armingCall(alarmDevices.map((dev) => dev.armStatus()))
        .then(() => { return { message: alarmDevices.map((dev) => { return { [dev.getName()]: dev.isArmed() }; }) }; });
};
exports.lightFn = (param) => {
    let opt = param[0];
    log.info('lights on/off ' + opt);
    return Promise.resolve({ message: false });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbWFuZEV4ZWN1dGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ub2RlL2NvcmUvQ29tbWFuZEV4ZWN1dGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQU1BLG1DQUF3QztBQUFHLE1BQU0sR0FBRyxHQUFHLElBQUksWUFBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzVFLG1DQUF3QztBQUN4Qyx1Q0FBMEM7QUFDMUMsK0NBQWtEO0FBQ2xELDZDQUFrRDtBQUdsRCx1REFBbUQ7QUFDbkQsbUNBQXdDO0FBQ3hDLDZCQUFzQztBQU10QyxJQUFJLFlBQVksR0FBVSxFQUFFLENBQUM7QUFNN0Isb0JBQW9CLFdBQStCO0lBQy9DLEdBQUcsQ0FBQyxJQUFJLENBQUMsZUFBZSxXQUFXLENBQUMsTUFBTSxZQUFZLENBQUMsQ0FBQztJQUN4RCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDaEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUM7UUFDeEIsZ0JBQU8sQ0FBQyxLQUFLLENBQUM7S0FDYixDQUFDO1NBQ0wsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDekMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ1QsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNmLE1BQU0sSUFBSSxHQUFHLG9DQUFvQyxDQUFDO1FBQ2xELEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEIsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBT0Qsd0JBQStCLEdBQVUsSUFBSSxZQUFZLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUFsRSx3Q0FBa0U7QUFFckQsUUFBQSxNQUFNLEdBQUcsR0FBNkIsRUFBRTtJQUNqRCxNQUFNLFFBQVEsR0FBRyw2QkFBVyxFQUFFLENBQUM7SUFD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