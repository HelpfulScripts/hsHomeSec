"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const hsnode_1 = require("hsnode");
const log = new hsnode_1.Log('hsCmdExec');
const hsutil_1 = require("hsutil");
const hsosaes6_1 = require("hsosaes6");
const UserComm_1 = require("../comm/UserComm");
const Device_1 = require("../device/Device");
const CommandReceiver_1 = require("./CommandReceiver");
const hsutil_2 = require("hsutil");
const path = require("path");
let gSnapshotDir = '';
function armingCall(deviceCalls) {
    log.info(`waiting for ${deviceCalls.length} responses`);
    return Promise.race([
        Promise.all(deviceCalls),
        hsutil_1.timeout(20000)
    ])
        .then(() => { log.info(`...completed`); })
        .catch(err => {
        log.error(err);
        const resp = 'some device status results missing';
        log.error(resp);
    });
}
function setSnapshotDir(dir) { gSnapshotDir = dir; }
exports.setSnapshotDir = setSnapshotDir;
exports.helpFn = () => {
    const commands = CommandReceiver_1.getCommands();
    let msg = 'available commands:\n ' + commands.join('\n  ');
    return Promise.resolve({ message: msg });
};
exports.restartFn = () => {
    return hsosaes6_1.osaCommands.restart()
        .then(result => {
        log.info('restarting...' + result);
        if (!result || result === true) {
            process.exit(0);
            return { message: true };
        }
        else {
            return { message: false };
        }
    });
};
exports.snapFn = (params) => {
    const getSnap = (dev) => !dev.hasVideo() ? Promise.resolve(undefined) :
        dev.snapPicture()
            .then(picData => {
            let fileName = path.normalize(gSnapshotDir + hsutil_2.date(`${dev.getName()}_%YYYY%MM%DD-%hh-%mm-%ss.jpg`));
            log.info(`saving snapshot from ${dev.getName()} at ${fileName}`);
            return hsnode_1.fs.writeStream(fileName, picData.data);
        });
    return Promise.all((!params || params[0] === '') ?
        Device_1.DeviceList.getDevices().map(getSnap)
        : [getSnap(Device_1.DeviceList.getDevice(params[0]))])
        .then((files) => { return { attachments: files }; });
};
exports.camPreset = (params) => {
    const device = Device_1.DeviceList.getDevice(params[0]);
    const presetIndex = parseInt(params[1]);
    return device.ptzPreset(presetIndex)
        .then(() => log.info(`moving ${device.getName()} to preset ${presetIndex}`))
        .then(hsutil_1.delay(10000))
        .then(() => exports.snapFn([device.getName()]));
};
exports.facetimeFn = (username) => {
    const user = UserComm_1.users.userByName(username[0]);
    log.info('trying facetime call to ' + user.name);
    return hsosaes6_1.osaCommands.facetime(user.AppleID)
        .then((result) => { return { message: result }; });
};
exports.sayFn = (msg) => {
    return hsosaes6_1.osaCommands.say(msg[0])
        .then((result) => { return { message: result }; });
};
exports.armFn = (param) => {
    const audible = (param[0] === 'away');
    const devices = Device_1.DeviceList.getDevices().filter(d => d.hasAlarm());
    return Promise.all(devices.map((d) => d.setAudible(audible)
        .then(() => d.arm(true))
        .then((b) => `${d.getName()} ${b ? 'armed' : '??'} ${d.getAudible() ? 'with siren' : ''}`)))
        .then((results) => {
        log.debug(`devices armed: ${log.inspect(results)}`);
        return { message: results.join('\n') };
    })
        .catch(log.error.bind(log));
};
exports.disarmFn = () => {
    const devices = Device_1.DeviceList.getDevices().filter(d => d.hasAlarm());
    return Promise.all(devices.map((d) => d.arm(false)
        .then((b) => `${d.getName()} ${b ? 'disarmed' : '??'}`)))
        .then((results) => {
        log.info(`devices disarmed: ${log.inspect(results)}`);
        return { message: results.join('\n') };
    })
        .catch(log.error.bind(log));
};
exports.armingStatusFn = () => {
    const alarmDevices = Device_1.DeviceList.getDevices()
        .filter((dev) => dev.hasAlarm());
    return armingCall(alarmDevices.map((dev) => dev.armStatus()))
        .then(() => { return { message: alarmDevices.map((dev) => { return { [dev.getName()]: dev.isArmed() }; }) }; });
};
exports.lightFn = (param) => {
    let opt = param[0];
    log.info('lights on/off ' + opt);
    return Promise.resolve({ message: false });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbWFuZEV4ZWN1dGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ub2RlL2NvcmUvQ29tbWFuZEV4ZWN1dGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQU1BLG1DQUF3QztBQUFHLE1BQU0sR0FBRyxHQUFHLElBQUksWUFBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzVFLG1DQUErQztBQUMvQyx1Q0FBMEM7QUFDMUMsK0NBQWtEO0FBQ2xELDZDQUFrRDtBQUdsRCx1REFBbUQ7QUFDbkQsbUNBQXdDO0FBQ3hDLDZCQUFzQztBQU10QyxJQUFJLFlBQVksR0FBVSxFQUFFLENBQUM7QUFNN0Isb0JBQW9CLFdBQStCO0lBQy9DLEdBQUcsQ0FBQyxJQUFJLENBQUMsZUFBZSxXQUFXLENBQUMsTUFBTSxZQUFZLENBQUMsQ0FBQztJQUN4RCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDaEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUM7UUFDeEIsZ0JBQU8sQ0FBQyxLQUFLLENBQUM7S0FDYixDQUFDO1NBQ0wsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDekMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ1QsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNmLE1BQU0sSUFBSSxHQUFHLG9DQUFvQyxDQUFDO1FBQ2xELEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEIsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBT0Qsd0JBQStCLEdBQVUsSUFBSSxZQUFZLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUFsRSx3Q0FBa0U7QUFFckQsUUFBQSxNQUFNLEdBQUcsR0FBNkIsRUFBRTtJQUNqRCxNQUFNLFFBQVEsR0FBRyw2QkFBVyxFQUFFLENBQUM7SUFD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